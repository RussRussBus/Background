# converts multiplier output to more readable fomrat

import argparse

parser = argparse.ArgumentParser(description='creates background multiplier')
parser.add_argument('multiplier_file', type=str, help='input file generated by creating_multiplier.py')
parser.add_argument('--outfile', type=str, default='readable_multiplier.txt', help='output file name')
args = parser.parse_args()

# converts multiplier from file to a string
with open(args.multiplier_file) as fp:
    next_line = False
    multiplier = []
    for line in fp:
        if line[0] == '+':
            next_line = True
            continue
        if next_line == True:
            next_line = False
            multiplier.append(line)
    multiplier = ''.join(multiplier)
    multiplier = multiplier.replace('\n','')

def dec_ls_values(multiplier):
    count = 0
    ls_val = []
    for sym in multiplier:
        value = ord(sym)
        value = value - 65
        value = 2**value
        ls_val.append(value)
    return ls_val

with open(args.outfile, 'w') as out:
    ls_val = dec_ls_values(multiplier)
    start = 1

    out.write(f'beg - end\tmultiplier\n')

    for n in range(len(ls_val)-1):
        n = n+1
        if ls_val[n] != ls_val[n-1]:
            out.write(f'{start} - {n}\t{ls_val[n-1]}x\n')
            start = n+1

    # for final line
    out.write(f'{start} - {len(ls_val)}\t{ls_val[-1]}x')